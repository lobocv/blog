<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Lobocv Blog</title><link>http://blog.lobocv.com/posts/</link><description>Recent content in Posts on Lobocv Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 30 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.lobocv.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Defusing an ElasticSearch Mapping Explosion with Slots</title><link>http://blog.lobocv.com/posts/elasticsearch_slots/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate><guid>http://blog.lobocv.com/posts/elasticsearch_slots/</guid><description>ElasticSearch is a popular OLAP database that allows you to quickly search and aggregate your data in a rich and powerful way. It is a mature storage technology that has been used to back many online storefronts and analytical processing products around the world. Under the hood, ElasticSearch uses Lucene to index each field in the document so that queries can be executed promptly.
In order to provide its rich searching capabilities, ES creates indices for each field it receives.</description></item><item><title>Reducing System Load With Event Folding</title><link>http://blog.lobocv.com/posts/event_folding/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>http://blog.lobocv.com/posts/event_folding/</guid><description>code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;} MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'] // removed 'code' entry } }); MathJax.Hub.Queue(function() { var all = MathJax.Hub.getAllJax(), i; for(i = 0; i One of the prevailing forms of communication in modern microservice architectures is asynchronous messaging. This is the backbone of the event-driven architecture model. In this model, services send messages to a message broker, which then distributes (publishes) the messages to interested (subscribed) clients.</description></item><item><title>Building a Comfortable Dev Environment</title><link>http://blog.lobocv.com/posts/dev_environment/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate><guid>http://blog.lobocv.com/posts/dev_environment/</guid><description>Being a software developer can be overwhelming at times. There are an endlessly diverse set of tools, technologies, languages and frameworks to choose from. To make it worse, that list grows larger and larger each day. Tools like git, docker, docker-compose, kubernetes, ssh, curl, sed, awk, grep, jq etc. are all tools we use multiple times a day.
Most of these tools have a small subset of commands / flags or use-cases that we use most often.</description></item><item><title>Recursively Merging JSONB in PostgreSQL</title><link>http://blog.lobocv.com/posts/recursive_jsonb_merge/</link><pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate><guid>http://blog.lobocv.com/posts/recursive_jsonb_merge/</guid><description>In addition to storing primitive data types such as INT, FLOAT and VARCHAR, PostgreSQL supports storing JSON and binary JSON (JSONB). These JSON types have a wide variety of functions and operators[1]. One of the more common and useful operators is the concatenation operator, ||, which concatenates two jsonb values into a new JSONB value.
Example:
postgres=&amp;gt; SELECT &amp;#39;{&amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: 2}&amp;#39;::jsonb || &amp;#39;{&amp;#34;b&amp;#34;: 5, &amp;#34;c&amp;#34;: 6}&amp;#39;::jsonb as result; result -------------------------- {&amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: 5, &amp;#34;c&amp;#34;: 6} However, this concatenation is limiting.</description></item></channel></rss>